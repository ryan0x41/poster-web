<script type="importmap">
  {
    "imports": {
      "socket.io-client": "https://cdn.skypack.dev/socket.io-client",
      "axios": "https://cdn.skypack.dev/axios"
    }
  }
</script>
<script>
  window.apiBaseURL = "<%= apiBaseURL %>";
  window.wsPortNumber = "<%= wsPortNumber %>";
</script>
<script type="module" src="/js/main.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<script src="https://cdn.tailwindcss.com"></script>
<style>
  :root {
    --primary: #2f27ce;
    --icon-color: var(--primary);
    --secondary: #dedcff;
    --background: #000000;
    --light: #ffffff;
    --heading: #DDDBFF;
    --text: #9893D8;
    --sidebar-bg: #111111;
    --receiver-bg: var(--primary);
    --sender-bg: #222222;
    --foreground-bg: #1d1d1d;
    --spotify-green: #1DB954;
  }

  .hover-light:hover {
    color: #e0e0e0;
  }

  nav * {
    z-index: 3000 !important;
  }

  #reports-button {
    color: white !important;
  }
</style>

<nav class="bg-[var(--sidebar-bg)] px-4 py-3 flex justify-between items-center">
  <div class="text-xl font-bold text-[var(--heading)]" onclick="window.location='/'" style="cursor:pointer;">
    poster
  </div>
  <div class="flex items-center space-x-4">
    <div class="relative inline-block text-left">
      <button id="notifications-button" type="button" class="relative flex items-center focus:outline-none">
        <span id="notifications-badge"
          class="inline-flex items-center justify-center px-1 py-0.5 text-xs font-bold leading-none text-white bg-red-600 rounded-full"
          style="display: none;"></span>
      </button>
      <div id="notifications-dropdown"
        class="origin-top-right absolute right-0 mt-2 w-64 rounded-md shadow-lg bg-[var(--foreground-bg)] ring-1 ring-black ring-opacity-5 hidden">
        <div class="py-2 px-2" role="menu" aria-orientation="vertical" aria-labelledby="notifications-button">
          <div class="flex justify-between items-center mb-2">
            <span class="text-sm font-bold text-[var(--light)]">Notifications</span>
            <button id="read-all-button" class="text-xs text-blue-500 hover:underline">Read All</button>
          </div>
          <ul id="notifications-list"></ul>
        </div>
      </div>
    </div>
    <div class="relative inline-block text-left">
      <button id="menu-button" type="button" class="flex items-center focus:outline-none" aria-expanded="false"
        aria-haspopup="true">
        <img id="profile-picture" class="h-8 w-8 rounded-full"
          src="https://wallpapers.com/images/high/placeholder-profile-icon-20tehfawxt5eihco.png"
          alt="Profile Picture" />
        <svg class="ml-2 h-5 w-5 text-[var(--icon-color)]" xmlns="http://www.w3.org/2000/svg" fill="none"
          viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
        </svg>
      </button>
      <div id="dropdown-menu"
        class="origin-top-right absolute right-0 mt-2 w-32 rounded-md shadow-lg bg-[var(--foreground-bg)] ring-1 ring-black ring-opacity-5 hidden">
        <div class="py-1" role="menu" aria-orientation="vertical" aria-labelledby="menu-button">
          <a id="profile-link" href="#"
            class="block px-4 py-2 text-sm text-[var(--light)] hover:bg-[var(--sender-bg)] hover-light"
            role="menuitem">Profile</a>
          <a id="spotify-action" href="#" class="block px-4 py-2 text-sm hover:bg-[var(--sender-bg)] hover-light"
            role="menuitem">Link Spotify</a>
          <a id="logout-button" class="block px-4 py-2 text-sm text-red-500 hover:bg-[var(--sender-bg)] hover-light"
            role="menuitem" style="cursor:pointer;">Logout</a>
          <a id="reports-button" style="display:none;" class="block px-4 py-2 text-sm text-red-500 hover:bg-[var(--sender-bg)] hover-light"
          role="menuitem" style="cursor:pointer;">Report Validation</a>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  function getUserFromCookie() {
    const cookies = document.cookie.split('; ');
    const userCookie = cookies.find(cookie => cookie.startsWith('user='));
    if (!userCookie) return null;
    try {
      const encodedUserInfo = userCookie.split('=')[1];
      const decodedUserInfo = decodeURIComponent(encodedUserInfo);
      return JSON.parse(atob(decodedUserInfo));
    } catch (error) {
      console.error('Error decoding user cookie:', error);
      return null;
    }
  }

  function getUsername() {
    const user = getUserFromCookie();
    return user?.username;
  }

  function getUserId() {
    const user = getUserFromCookie();
    return user?.id;
  }

  function getAccountCreation() {
    const user = getUserFromCookie();
    return user?.accountCreation;
  }

  function getEmail() {
    const user = getUserFromCookie();
    return user?.email;
  }

  function userIsAdmin() {
    const user = getUserFromCookie();
    return user?.isAdmin;
  }

  function userSpotifyLinked() {
    const user = getUserFromCookie();
    return user?.spotifyLinked;
  }

  function getProfilePictureUrl() {
    const user = getUserFromCookie();
    return user?.profileImageUrl;
  }

  window.getUsername = getUsername;
  window.getUserId = getUserId;
  window.getAccountCreation = getAccountCreation;
  window.getEmail = getEmail;
  window.userIsAdmin = userIsAdmin;
  window.userSpotifyLinked = userSpotifyLinked;
  window.getProfilePictureUrl = getProfilePictureUrl;

  const menuButton = document.getElementById('menu-button');
  const dropdown = document.getElementById('dropdown-menu');
  const profilePicture = document.getElementById('profile-picture');
  const profileLink = document.getElementById('profile-link');
  const logoutButton = document.getElementById('logout-button');
  const reportsButton = document.getElementById('reports-button');
  const notificationsButton = document.getElementById('notifications-button');
  const notificationsDropdown = document.getElementById('notifications-dropdown');
  const readAllButton = document.getElementById('read-all-button');
  const spotifyAction = document.getElementById('spotify-action');

  function updateProfilePicture() {
    const profileUrl = getProfilePictureUrl();
    if (profileUrl) {
      profilePicture.src = profileUrl;
    }
  }

  function updateNotificationsBadge() {
    const notifications = document.querySelectorAll('#notifications-list li');
    const unreadCount = Array.from(notifications)
      .filter(notification => !notification.classList.contains('read')).length;
    const badge = document.getElementById('notifications-badge');
    badge.textContent = unreadCount;
    badge.style.display = unreadCount > 0 ? 'inline-flex' : 'none';
  }

  profileLink.addEventListener('click', (e) => {
    e.preventDefault();
    const username = getUsername();
    if (username) {
      window.location.href = `/profile/${username}`;
    }
  });

  logoutButton.addEventListener('click', async (e) => {
    e.preventDefault();
    if (window.logout) {
      await window.logout();
      window.location.reload();
    }
  });

  function updateSpotifyActionButton() {
    const isLinked = window.getUserCookieProperty && window.getUserCookieProperty('spotifyLinked');
    if (isLinked) {
      spotifyAction.textContent = "Unlink Spotify";
      spotifyAction.style.color = "white";
    } else {
      spotifyAction.textContent = "Link Spotify";
      spotifyAction.style.color = "lightgreen";
    }
  }
  updateSpotifyActionButton();

  spotifyAction.addEventListener('click', (e) => {
    e.preventDefault();
    const isLinked = window.getUserCookieProperty && window.getUserCookieProperty('spotifyLinked');
    if (isLinked) {
      if (window.unlinkSpotify) {
        window.unlinkSpotify();
        updateSpotifyActionButton();
      }
    } else {
      if (window.linkSpotifyAndRedirect) {
        window.linkSpotifyAndRedirect();
      }
    }
  });

  menuButton.addEventListener('click', (e) => {
    e.stopPropagation();
    dropdown.classList.toggle('hidden');
  });

  notificationsButton.addEventListener('click', (e) => {
    e.stopPropagation();
    notificationsDropdown.classList.toggle('hidden');
  });

  readAllButton.addEventListener('click', () => {
    const notifications = document.querySelectorAll('#notifications-list li');
    notifications.forEach(notification => {
      notification.classList.add('read');
      const btn = notification.querySelector('.mark-read-btn');
      if (btn) btn.style.display = 'none';
    });
    updateNotificationsBadge();
  });

  document.querySelectorAll('.mark-read-btn').forEach(button => {
    button.addEventListener('click', (e) => {
      const li = e.target.closest('li');
      li.classList.add('read');
      e.target.style.display = 'none';
      updateNotificationsBadge();
    });
  });

  document.querySelectorAll('#reports-button').forEach(button => {
    reportsButton.addEventListener('click', async (e) => {
      e.preventDefault();
      window.location.replace('/reports')
    });

    if(userIsAdmin()) {
      reportsButton.style.display = 'block'
    }
  });

  window.addEventListener('click', () => {
    dropdown.classList.add('hidden');
    notificationsDropdown.classList.add('hidden');
  });

  updateProfilePicture();
  updateNotificationsBadge();

  window.addEventListener('load', function () {
    updateSpotifyActionButton();
  });
</script>
<script src="/js/notification.js"></script>